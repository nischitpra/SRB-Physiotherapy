{"version":3,"sources":["images/HomePatientDoctor.svg","images/logo.svg","components/BookAppointmentForm.js","components/SlidingPanel.js","modules/BasicAppointmentForm.js","modules/Home.js","components/NavBar.js","modules/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BookAppointmentForm","props","state","name","phoneNumber","address","key","value","this","setState","slidingPanelRef","current","nextPanel","className","style","width","type","placeholder","onChange","evt","changeFormValue","target","onClick","submitForm","React","Component","SlidingPanel","currentContentIndex","maxContentIndex","panels","length","currentContent","nextContent","nextButtonLabel","startButtonLabel","document","getElementById","_exitAnimation","setTimeout","newIndex","newContent","buttonLabel","endButtonLabel","_enterAnimation","id","BasicAppointmentForm","createRef","render1","bind","render2","render3","ref","Home","src","patientCheckupImage","NavBar","logo","Dashboard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bbd5bb61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/HomePatientDoctor.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport '../css/BookAppointmentForm.css'\n\nclass BookAppointmentForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state={\n      name:\"\",\n      phoneNumber:\"\",\n      address:\"\"\n    }\n  }\n\n  changeFormValue(key, value){\n    this.setState({\n      [key]: value\n    })\n  }\n\n  submitForm() {\n    /**\n     * make request here\n     */\n    // alert(`name:${this.state.name}, phoneNumber:${this.state.phoneNumber}, address:${this.state.address}`)\n\n    if(this.props.slidingPanelRef!=null) {\n      this.props.slidingPanelRef.current.nextPanel()\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"flex-center\">\n        <h1 className=\"book-appointment-form-caption\">We come to your home!</h1>\n        <hr style={{width:\"200px\"}}/>\n        <div className=\"form-container\">\n          <div className=\"form-title\">Schedule an Appointment</div>\n          <div className=\"form-content\">\n            <input className=\"form-content-row\" type=\"name\" placeholder=\"Name\" onChange={ (evt)=> this.changeFormValue( \"name\", evt.target.value ) } />\n            <input className=\"form-content-row\" type=\"phonenumber\" placeholder=\"Phone Number\" onChange={ (evt)=> this.changeFormValue( \"phoneNumber\", evt.target.value ) } />\n          </div>\n          <button className=\"form-submit-button\" onClick={()=>this.submitForm()} >Book Now</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BookAppointmentForm","import React from 'react'\n\n\nimport '../css/SlidingPanel.css'\n\nclass SlidingPanel extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      currentContentIndex: 0,\n      maxContentIndex: props.panels.length-1,\n      currentContent: props.panels[0],\n      nextContent: props.panels[1],\n      nextButtonLabel: props.startButtonLabel,\n    }\n\n  }\n\n  _enterAnimation() {\n    document.getElementById(\"sliding-panel-content\").className = \"enter\"\n  }\n\n  _exitAnimation() {\n    document.getElementById(\"sliding-panel-content\").className = \"exit\"\n  }\n\n  nextPanel() {\n    const currentContentIndex = this.state.currentContentIndex\n    if(currentContentIndex < this.state.maxContentIndex) {\n      this._exitAnimation()\n    } else {\n      // todo: call final submission here\n      return\n    }\n\n    setTimeout(()=>{\n      const newIndex = this.state.currentContentIndex + 1\n      const newContent = this.props.panels[newIndex]\n\n      let nextContent = null\n      let buttonLabel = this.props.endButtonLabel\n      if(newIndex + 1 < this.props.panels.length){\n        buttonLabel = this.props.nextButtonLabel\n        nextContent = this.props.panels[newIndex+1]\n      }\n\n      this.setState({\n        currentContentIndex: newIndex, \n        currentContent: newContent, \n        nextContent: nextContent, \n        nextButtonLabel: buttonLabel\n      }, this._enterAnimation)\n     \n    }, 250)\n  }\n \n  render() {\n    return(\n      <div>\n        <div id=\"sliding-panel-content\">\n          {this.state.currentContent}\n        </div>\n        { this.props.startButtonLabel && <button onClick={()=>this.nextPanel()}>{this.state.nextButtonLabel}</button> }\n      </div>\n    )\n  }\n\n}\n\nexport default SlidingPanel","import React from 'react'\nimport BookAppointmentForm from '../components/BookAppointmentForm'\nimport SlidingPanel from '../components/SlidingPanel'\n\nclass BasicAppointmentForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.slidingPanelRef = React.createRef();\n\n    this.render1 = this.render1.bind(this)\n    this.render2 = this.render2.bind(this)\n    this.render3 = this.render3.bind(this)\n  }\n\n  render1() {\n    return(\n      <BookAppointmentForm slidingPanelRef={this.slidingPanelRef}/>\n    )\n  }\n\n\n  render2() {\n    return(\n      <div>\n        This is plane 2. This should slide in after plane 1<br/>\n        <button onClick={()=>this.slidingPanelRef.current.nextPanel()}>Next</button>\n      </div>\n    )\n  }\n\n  render3() {\n    return(\n      <div>\n        This is plane 3. This should slide in after plane 2.<br/>\n        <button onClick={()=>this.slidingPanelRef.current.nextPanel()}>Submit</button>\n      </div>\n    )\n  }\n\n \n\n  render() {\n    return(\n      <div className={this.props.className}>\n        <SlidingPanel ref={this.slidingPanelRef} panels={[this.render1(), this.render2(), this.render3()]}/>\n      </div>\n    )\n  }\n\n}\n\nexport default BasicAppointmentForm","import React, { Component } from 'react'\nimport patientCheckupImage from \"../images/HomePatientDoctor.svg\"\nimport BasicAppointmentForm from './BasicAppointmentForm'\n\nimport '../css/Home.css'\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"home-container\">\n        <img className=\"flex-1\"src={patientCheckupImage}/>\n        <BasicAppointmentForm className=\"flex-center\"/>\n      </div>\n    )\n  }\n}\n\nexport default Home","import React from 'react'\nimport logo from '../images/logo.svg'\n\nimport '../css/NavBar.css';\n\n\nclass NavBar extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    return(\n      <div className=\"navbar\">\n        <img className=\"logo\" src={logo}/>\n        <div className=\"company-block\">\n          <div className=\"company-name\">SRB Physio</div>\n          <div className=\"company-motto\">Cure at Home</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default NavBar","import React from 'react'\nimport Home from './Home'\nimport NavBar from '../components/NavBar'\n\nclass Dashboard extends React.Component {\n\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return(\n      <div>\n        <NavBar/>\n        <Home/>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard","import React from 'react';\nimport './App.css';\n\nimport Dashboard from './modules/Dashboard'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}